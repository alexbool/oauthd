<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:sec="http://www.springframework.org/schema/security" xmlns:oauth2="http://www.springframework.org/schema/security/oauth2"
    xmlns:context="http://www.springframework.org/schema/context" xmlns:c="http://www.springframework.org/schema/c"
    xsi:schemaLocation="http://www.springframework.org/schema/security/oauth2 http://www.springframework.org/schema/security/spring-security-oauth2.xsd
		http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security-3.1.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.1.xsd">

    <import resource="classpath:jdbc-context.xml" />

    <context:property-placeholder ignore-resource-not-found="true" system-properties-mode="OVERRIDE"
        location="classpath:application.properties,file:///etc/oauthd/oauthd.properties" />

    <bean id="jettyFactory" class="com.alexbool.support.jetty.JettyFactory" />
    <bean id="jetty" factory-bean="jettyFactory" factory-method="jetty" c:bindAddress="${server.bind.ip}"
        c:bindPort="${server.bind.port}" />

    <sec:authentication-manager id="clientAuthenticationManager">
        <sec:authentication-provider user-service-ref="clientDetailsUserService" />
    </sec:authentication-manager>

    <sec:authentication-manager alias="authenticationManager">
        <sec:authentication-provider user-service-ref="userRepository" />
    </sec:authentication-manager>

    <bean id="clientDetails" class="org.springframework.security.oauth2.provider.JdbcClientDetailsService" c:dataSource-ref="dataSource" />

    <bean id="clientDetailsUserService" class="org.springframework.security.oauth2.provider.client.ClientDetailsUserDetailsService">
        <constructor-arg ref="clientDetails" />
    </bean>

    <bean id="tokenServices" class="org.springframework.security.oauth2.provider.token.DefaultTokenServices">
        <property name="tokenStore" ref="tokenStore" />
        <property name="supportRefreshToken" value="true" />
    </bean>

    <bean id="forbiddenEntryPoint" class="org.springframework.security.web.authentication.Http403ForbiddenEntryPoint" />
    <bean id="oauthAccessDeniedHandler" class="org.springframework.security.oauth2.provider.error.OAuth2AccessDeniedHandler" />
    <bean id="oauthAuthenticationEntryPoint" class="org.springframework.security.oauth2.provider.error.OAuth2AuthenticationEntryPoint" />

    <sec:http pattern="/oauth/authorize" create-session="stateless" authentication-manager-ref="authenticationManager"
        entry-point-ref="forbiddenEntryPoint">
        <sec:intercept-url pattern="/oauth/authorize" access="IS_AUTHENTICATED_FULLY" />
        <sec:anonymous enabled="false" />
        <!-- Noone is allowed here, because we are not supporting anything except password grant -->
        <!-- <sec:http-basic entry-point-ref="forbiddenEntryPoint" /> -->
        <sec:access-denied-handler ref="oauthAccessDeniedHandler" />
    </sec:http>

    <sec:http pattern="/oauth/token" create-session="stateless" authentication-manager-ref="clientAuthenticationManager"
        entry-point-ref="oauthAuthenticationEntryPoint">
        <sec:intercept-url pattern="/oauth/token" access="IS_AUTHENTICATED_FULLY" />
        <sec:anonymous enabled="false" />
        <sec:http-basic entry-point-ref="oauthAuthenticationEntryPoint" />
        <!-- include this only if you need to authenticate clients via request parameters -->
        <!-- <sec:custom-filter ref="clientCredentialsTokenEndpointFilter" before="BASIC_AUTH_FILTER" /> -->
        <sec:access-denied-handler ref="oauthAccessDeniedHandler" />
    </sec:http>

    <oauth2:resource-server id="oauth2ProviderFilter" token-services-ref="tokenServices" />

    <sec:http pattern="/user/(?!(register|check-username-free))(.*)" request-matcher="regex"
        entry-point-ref="oauthAuthenticationEntryPoint" create-session="stateless">
        <sec:anonymous enabled="false" />
        <sec:intercept-url pattern="/user/.*" access="IS_AUTHENTICATED_FULLY" />
        <sec:custom-filter ref="oauth2ProviderFilter" before="PRE_AUTH_FILTER" />
    </sec:http>

    <sec:http pattern="/client/.*" request-matcher="regex" authentication-manager-ref="clientAuthenticationManager"
        entry-point-ref="oauthAuthenticationEntryPoint" create-session="stateless">
        <sec:anonymous enabled="false" />
        <sec:intercept-url pattern="/client/.*" access="IS_AUTHENTICATED_FULLY" />
        <sec:http-basic entry-point-ref="forbiddenEntryPoint" />
    </sec:http>
</beans>
